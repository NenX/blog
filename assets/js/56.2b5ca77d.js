(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{420:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("0 简介")]),t._v(" "),a("p",[t._v("GNU Binary Utilities或binutils是一整套的编程语言工具程序，用来处理许多格式的目标文件。当前的版本原本由在Cygnus Solutions的程序员以Binary File Descriptor library（libbfd）所撰写。这个工具程序通常搭配GCC、make、和GDB这些程序来使用。\n刚开始时，这个包内只有几个程序，但后来，由于功能需求近似，陆续加入了GNU汇编器（GAS）和GNU链接器（GLD）。一般来说，这些程序都很简单，大部分的复杂性都存在于Binary File Descriptor library和libopcodes这些库里头。\n原来的BFD版本由David Henkel-Wallace和Steve Chamberlain所撰写。Ken Raeburn和Ian Lance Taylor曾维护过。目前则是由Nick Clifton负责维护此版本。至于Linux上的版本，由H.J. Lu在维护。")]),t._v(" "),a("p",[t._v("注：以上内存摘自wiki")]),t._v(" "),a("p",[t._v("GNU Binutils是一系列二进制工具的集合。主要包括：")]),t._v(" "),a("ul",[a("li",[t._v("as：GNU汇编器")]),t._v(" "),a("li",[t._v("ld：GNU链接器")])]),t._v(" "),a("p",[t._v("但也包括以下二进制工具：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("工具")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("addr2line：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从目标文件的虚拟地址获取文件的行号或符号。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ar：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可以对静态库做创建、修改和提取的操作。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("c++filt：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("反编译（反混淆，demangle）C++符号的工具。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("dlltool：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("创建创建Windows动态库。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("gold：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("另一种新的、更快的仅支持ELF的链接器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("gprof：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("性能分析（profiling）工具程序。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("nlmconv：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可以转换成NetWare Loadable Module(NLM)目标文件格式。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("nm：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("显示目标文件内的符号信息。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("objcopy：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("复制和转译目标文件。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("objdump：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("显示目标文件的相关信息，亦可反汇编。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ranlib：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("产生静态库的索引。（和nm -s功能类似）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("readelf：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("显示ELF文件的内容。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("size：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("列出目标文件或库文件的section大小。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("strings：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("列出文件中可打印的字符串信息。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("strip：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从目标文件中移除符号信息。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("windmc：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Windows消息资源编译器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("windres：")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Windows资源文件编译器。")])])])]),t._v(" "),a("p",[t._v("其中多数程序使用BFD(Binary File Descriptor库)实现底层操作。其中多数也使用opcodes库来汇编及反汇编机器指令。")]),t._v(" "),a("p",[t._v("Binutils已被移植到大多数助理的unix/linux系统中，同时也支持Wintel系统，它们存在的主要目标是为GNU系统提供编译和链接程序的机制。")]),t._v(" "),a("p",[t._v("注：以上内容翻译自GNU Binutils")]),t._v(" "),a("p",[t._v("下面逐个介绍下上面提到的工具集。\n这里说明下，所有文档都可以在documentation for binutils 2.28找到。")]),t._v(" "),a("h2",{attrs:{id:"_1-目标文件处理及分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-目标文件处理及分析"}},[t._v("#")]),t._v(" 1 目标文件处理及分析")]),t._v(" "),a("p",[t._v("nm")]),t._v(" "),a("p",[t._v("nm用来列出目标文件中的符号，可以帮助程序员定位和分析执行程序和目标文件中的符号信息和它的属性。比如我用以下代码编译之后，编译指令gcc main.cpp")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<cstdio>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"enter checking\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("使用nm输出结果如下：(部分删减，不是全部)")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ nm a.out \n0000000000601040 B __bss_start\n0000000000601040 b completed.7291\n0000000000601030 D __data_start\n0000000000601030 W data_start\n0000000000400560 T __libc_csu_init\n U __libc_start_main@@GLIBC_2.2.5\n0000000000400536 T main\n U puts@@GLIBC_2.2.5\n00000000004004b0 t register_tm_clones\n0000000000400440 T _start\n0000000000601040 D __TMC_END__\n")])])]),a("p",[t._v("objcopy")]),t._v(" "),a("p",[t._v("objcopy可以将一种格式的目标文件转化为另外一种格式的目标文件. 它使用GNU BFD库进行读/写目标文件。objcopy就能将原格式的目标文件转化为不同格式的目标文件。\nobjcopy用于将object的部分或全部内容拷贝到另一个object，从而可以实现格式的变换。\nobjcopy可用用于将文件转换成S-record格式或者raw二进制格式。objcopy还可以实现将图像编译到目标文件中。")]),t._v(" "),a("p",[t._v("objdump")]),t._v(" "),a("p",[t._v("objdump用来显示目标文件的信息。可以通过选项控制显示那些特定信息。objdump一个最大的用处恐怕就是将C/C++代码反汇编了. 在嵌入式软件开发过程中, 也可以用它查看执行文件或库文件的信息。")]),t._v(" "),a("p",[t._v("readelf")]),t._v(" "),a("p",[t._v("readelf用来显示ELF格式目标文件的信息。可通过参数选项来控制显示哪些特定信息。(注意: readelf不支持显示静态库, 也不支持64位的ELF文件)。")]),t._v(" "),a("h2",{attrs:{id:"_2-编译链接工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-编译链接工具"}},[t._v("#")]),t._v(" 2 编译链接工具")]),t._v(" "),a("p",[t._v("ar")]),t._v(" "),a("p",[t._v("ar用于建立、修改、提取静态库文件(archive)。archive是一个包含多个被包含文件的单一文件（也称之为库文件），其结构保证了可以从中检索并得到原始的被包含文件（称之为archive中的member）。member的原始文件内容、模式（权限）、时间戳、所有者和组等属性都被保存在 archive中。member被提取后，他们的属性被恢复到初始状态。")]),t._v(" "),a("p",[t._v("ar主要用于创建C库文件。")]),t._v(" "),a("p",[t._v("典型用法如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ ar rv libNAME.a file1.o file2.o\n")])])]),a("p",[t._v("ld")]),t._v(" "),a("p",[t._v("ld是链接器，通常由GCC/G++调用。外部基本不可见。")]),t._v(" "),a("p",[t._v("addr2line")]),t._v(" "),a("p",[t._v("在崩库或者存在需要分析程序调用堆栈的情况下非常有用，addr2line可以反编译到代码的特定行。")]),t._v(" "),a("p",[t._v("c++filt")]),t._v(" "),a("p",[t._v("用于反混淆c++变量或函数名称的，可以还原为人类可读的格式。通常这个过程称为反混淆-demangle。")]),t._v(" "),a("p",[t._v("dlltool")]),t._v(" "),a("p",[t._v("生成windows动态链接库在编译时依赖的lib索引，典型的应用如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ gcc -c dll.c # 编译\n$ dlltool -e exports.o -l dll.lib dll.o # 生成lib\n\n$ gcc dll.o exports.o -o dll.dll\n$ gcc program.o dll.lib -o program # 生成调用dll的可执行文件\n")])])]),a("p",[t._v("注：第1、2部分主要参考csdn baike")]),t._v(" "),a("h2",{attrs:{id:"_3-小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-小结"}},[t._v("#")]),t._v(" 3 小结")]),t._v(" "),a("p",[t._v("本文内容不是什么新的知识。只是我近期阅读书籍是看到的。从这些基础工具来看，基本上可以构建一个类似vs的IDE环境，也可以基本抛开复杂的底层实现逻辑，直接基于高级编程语言进行处理。\n撰写本文的目的主要是整理下我对GNU基础框架的理解，对基本工具有所了解，对于后续更深入的学习是有所帮助的。")])])}),[],!1,null,null,null);e.default=s.exports}}]);