(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{377:function(e,t,o){"use strict";o.r(t);var r=o(42),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("The hello program begins life as a high-level C program because it can be read\nand understood by human beings in that form. However, in order to run hello.c\non the system, the individual C statements must be translated by other programs\ninto a sequence of low-level machine-language instructions. These instructions are\nthen packaged in a form called an executable object program and stored as a binary\ndisk file. Object programs are also referred to as executable object files.")]),e._v(" "),o("p",[e._v("On a Unix system, the translation from source file to object file is performed\nby a compiler driver:")]),e._v(" "),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[e._v("linux"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" gcc -o hello hello.c\n")])])]),o("table",[o("thead",[o("tr",[o("th",[e._v("from")]),e._v(" "),o("th",[e._v("source files")]),e._v(" "),o("th",[e._v("Preprocessor(cpp)")]),e._v(" "),o("th",[e._v("Compiler(cc1)")]),e._v(" "),o("th",[e._v("Assembler(as)")]),e._v(" "),o("th",[e._v("Linker(ld)")])])]),e._v(" "),o("tbody",[o("tr",[o("td",[e._v("file")]),e._v(" "),o("td",[e._v("hello.c")]),e._v(" "),o("td",[e._v("hello.i")]),e._v(" "),o("td",[e._v("hello.s")]),e._v(" "),o("td",[e._v("hello.o  (printf.o)")]),e._v(" "),o("td",[e._v("hello")])]),e._v(" "),o("tr",[o("td",[e._v("type")]),e._v(" "),o("td",[e._v("Source program")]),e._v(" "),o("td",[e._v("Modified source program")]),e._v(" "),o("td",[e._v("Assembly program")]),e._v(" "),o("td",[e._v("Relocatable object programs")]),e._v(" "),o("td",[e._v("Executable object program")])]),e._v(" "),o("tr",[o("td"),e._v(" "),o("td",[e._v("(text)")]),e._v(" "),o("td",[e._v("(text)")]),e._v(" "),o("td",[e._v("(text)")]),e._v(" "),o("td",[e._v("(binary)")]),e._v(" "),o("td",[e._v("(binary)")])]),e._v(" "),o("tr",[o("td"),e._v(" "),o("td"),e._v(" "),o("td",[e._v("gcc -E")]),e._v(" "),o("td",[e._v("gcc -S")]),e._v(" "),o("td",[e._v("gcc -c")]),e._v(" "),o("td")])])]),e._v(" "),o("p",[e._v("Here, the gcc compiler driver reads the source file hello.c and translates it into\nan executable object file hello. The translation is performed in the sequence\nof four phases shown in Figure 1.3. The programs that perform the four phases\n(preprocessor, compiler, assembler, and linker) are known collectively as the\ncompilation system.")]),e._v(" "),o("ul",[o("li",[e._v("Preprocessing phase.The preprocessor (cpp) modifies the original C program\naccording to directives that begin with the ‘#’ character. For example, the\n"),o("code",[e._v("#include <stdio.h>")]),e._v(" command in line 1 of hello.c tells the preprocessor\nto read the contents of the system header file stdio.h and insert it directly\ninto the program text. The result is another C program, typically with the .i\nsuffix.")]),e._v(" "),o("li",[e._v("Compilation phase. The compiler (cc1) translates the text file hello.i into\nthe text file hello.s, which contains an assembly-language program. This\nprogram includes the following definition of function main:")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("1 main:\n2 subq $8, %rsp\n3 movl $.LC0, %edi\n4 call puts\n5 movl $0, %eax\n6 addq $8, %rsp\n7 ret\n")])])]),o("p",[e._v("Each of lines 2–7 in this definition describes one low-level machinelanguage instruction in a textual form. Assembly language is useful because\nit provides a common output language for different compilers for different\nhigh-level languages. For example, C compilers and Fortran compilers both\ngenerate output files in the same assembly language.")]),e._v(" "),o("ul",[o("li",[e._v("Assembly phase. Next, the assembler (as) translates hello.s into machinelanguage instructions, packages them in a form known as a relocatable object\nprogram, and stores the result in the object file hello.o. This file is a binary\nfile containing 17 bytes to encode the instructions for function main. If we\nwere to view hello.o with a text editor, it would appear to be gibberish.")]),e._v(" "),o("li",[e._v("Linking phase.Notice that our hello program calls the printf function, which\nis part of the standard C library provided by every C compiler. The printf\nfunction resides in a separate precompiled object file called printf.o, which\nmust somehow be merged with our hello.o program. The linker (ld) handles\nthis merging. The result is the hello file, which is an executable object file (or\nsimply executable) that is ready to be loaded into memory and executed by\nthe system.")])])])}),[],!1,null,null,null);t.default=a.exports}}]);