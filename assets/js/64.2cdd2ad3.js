(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{431:function(v,_,i){"use strict";i.r(_);var a=i(42),l=Object(a.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h2",{attrs:{id:"文件系统"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件系统"}},[v._v("#")]),v._v(" 文件系统")]),v._v(" "),i("h3",{attrs:{id:"路径"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#路径"}},[v._v("#")]),v._v(" 路径")]),v._v(" "),i("p",[v._v("目录分隔符：Unix/Linux系统为斜杆“/”，而DOS则用反斜杠“\\”。")]),v._v(" "),i("h3",{attrs:{id:"目录"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[v._v("#")]),v._v(" 目录")]),v._v(" "),i("p",[v._v("windows以盘符管理，linux以目录管理。内部都是树状结构。")]),v._v(" "),i("h4",{attrs:{id:"linux-的目录结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#linux-的目录结构"}},[v._v("#")]),v._v(" Linux 的目录结构")]),v._v(" "),i("ul",[i("li",[v._v("/：根目录")]),v._v(" "),i("li",[v._v("/bin or /usr/bin：可执行二进制的目录")]),v._v(" "),i("li",[v._v("/dev：设备")]),v._v(" "),i("li",[v._v("/home：用户目录")]),v._v(" "),i("li",[v._v("/usr/include：头文件")])]),v._v(" "),i("h3",{attrs:{id:"一切皆文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一切皆文件"}},[v._v("#")]),v._v(" 一切皆文件")]),v._v(" "),i("h4",{attrs:{id:"文件分类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件分类"}},[v._v("#")]),v._v(" 文件分类")]),v._v(" "),i("ul",[i("li",[v._v("普通文件（-）：\n从Linux的角度来说，类似mp4、pdf、html这样应用层面上的文件类型都属于普通文件。Linux用户可以根据访问权限对普通文件进行查看、更改和删除")]),v._v(" "),i("li",[v._v("目录文件（d，directory file）：\n目录文件对于用惯Windows的用户来说不太容易理解，目录也是文件的一种。目录文件包含了各自目录下的文件名和指向这些文件的指针，打开目录事实上就是打开目录文件，只要有访问权限，你就可以随意访问这些目录下的文件（普通文件的执行权限就是目录文件的访问权限），但是只有内核的进程能够修改它们\n虽然不能修改，但是我们能够通过vim去查看目录文件的内容")]),v._v(" "),i("li",[v._v("符号链接（l，symbolic link）：\n这种类型的文件类似Windows中的快捷方式，是指向另一个文件的间接指针，也就是我们常说的软链接")]),v._v(" "),i("li",[v._v("块设备文件（b，block）和字符设备文件（c，char）：\n这些文件一般隐藏在/dev目录下，在进行设备读取和外设交互时会被使用到，比如磁盘光驱就是块设备文件，串口设备则属于字符设备文件。系统中的所有设备要么是块设备文件，要么是字符设备文件，无一例外")]),v._v(" "),i("li",[v._v("FIFO（p，pipe）：\n管道文件主要用于进程间通讯。比如使用mkfifo命令可以创建一个FIFO文件，启用一个进程A从FIFO文件里读数据，启动进程B往FIFO里写数据，先进先出，随写随读。")]),v._v(" "),i("li",[v._v("套接字（s，socket）：\n用于进程间的网络通信，也可以用于本机之间的非网络通信\n这些文件一般隐藏在/var/run目录下，证明着相关进程的存在")])]),v._v(" "),i("h3",{attrs:{id:"用户组"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#用户组"}},[v._v("#")]),v._v(" 用户组")]),v._v(" "),i("p",[v._v("用户组\n在linux中的每个用户必须属于一个组，不能独立于组外。在linux中每个文件有所有者、所在组、其它组的概念")]),v._v(" "),i("ul",[i("li",[i("p",[v._v("所有者：一般为文件的创建者，谁创建了该文件，就天然的成为该文件的所有者。用ls ‐ahl命令可以看到文件的所有者，也可以使用chown 用户名 文件名来修改文件的所有者")])]),v._v(" "),i("li",[i("p",[v._v("所在组：当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。用ls ‐ahl命令可以看到文件的所有组，也可以使用chgrp 组名 文件名来修改文件所在的组")])]),v._v(" "),i("li",[i("p",[v._v("其它组：除开文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组")])]),v._v(" "),i("li",[i("p",[v._v("改变用户所在的组")])])]),v._v(" "),i("h3",{attrs:{id:"文件权限"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#文件权限"}},[v._v("#")]),v._v(" 文件权限")]),v._v(" "),i("p",[v._v("ls -l中显示的内容如下：")]),v._v(" "),i("div",{staticClass:"language-shell extra-class"},[i("div",{staticClass:"highlight-lines"},[i("br"),i("div",{staticClass:"highlighted"},[v._v(" ")])]),i("pre",{pre:!0,attrs:{class:"language-shell"}},[i("code",[v._v("-rwxr-xr-x "),i("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),v._v(" root root   "),i("span",{pre:!0,attrs:{class:"token number"}},[v._v("43080")]),v._v(" Jul "),i("span",{pre:!0,attrs:{class:"token number"}},[v._v("21")]),v._v("  "),i("span",{pre:!0,attrs:{class:"token number"}},[v._v("2018")]),v._v(" systemd-sysusers\n")])])]),i("p",[v._v("前十个字符确定不同用户对文件的权限")]),v._v(" "),i("ul",[i("li",[v._v("第一个字符代表文件类型：普通文件（-）、目录（d），链接（l）...")]),v._v(" "),i("li",[v._v("其余字符三个一组（rwx）：r（读）r（写）x（执行）")]),v._v(" "),i("li",[v._v("第一组rwx：文件所有者的权限是读、写、执行。")]),v._v(" "),i("li",[v._v("第二组r-x：与文件所有者同一组的成员的权限是读、执行。")]),v._v(" "),i("li",[v._v("第三组：与文件所有者不同组的成员的权限。")]),v._v(" "),i("li",[v._v("也可用数字表示为：r=4，w=2，x=1  因此rwx=4+2+1=7\n1 表示连接的文件数，第一个 root 代表用户，第二个 root 代表用户所在组，43080为文件大小。")])]),v._v(" "),i("h3",{attrs:{id:"修改权限chmod"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#修改权限chmod"}},[v._v("#")]),v._v(" 修改权限chmod")]),v._v(" "),i("ul",[i("li",[v._v("chmod 755 abc：赋予abc权限rwxr-xr-x")]),v._v(" "),i("li",[v._v("chmod u=rwx，g=rx，o=rx abc：同上u=用户权限，g=组权限，o=不同组其他用户权限，a=all")]),v._v(" "),i("li",[v._v("chmod u-x，g+w abc：给abc去除用户执行的权限，增加组写的权限")]),v._v(" "),i("li",[v._v("chmod a+r abc：给所有用户添加读的权限")])]),v._v(" "),i("h3",{attrs:{id:"改变所有者（chown）和用户组（chgrp）命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#改变所有者（chown）和用户组（chgrp）命令"}},[v._v("#")]),v._v(" 改变所有者（chown）和用户组（chgrp）命令")]),v._v(" "),i("ul",[i("li",[i("p",[v._v("chown xiaoming abc：改变abc的所有者为xiaoming")])]),v._v(" "),i("li",[i("p",[v._v("chgrp root abc：改变abc所属的组为root")])]),v._v(" "),i("li",[i("p",[v._v("chown root ./abc：改变abc这个目录的所有者是root")])]),v._v(" "),i("li",[i("p",[v._v("chown ‐R root ./abc：改变abc这个目录及其下面所有的文件和目录的所有者是root")])])]),v._v(" "),i("h3",{attrs:{id:"改变用户所在组"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#改变用户所在组"}},[v._v("#")]),v._v(" 改变用户所在组")]),v._v(" "),i("p",[v._v("在添加用户时，可以指定将该用户添加到哪个组中，同样用root的管理权限可以改变某个用户所在的组")]),v._v(" "),i("ul",[i("li",[v._v("usermod ‐g 组名 用户名")])]),v._v(" "),i("p",[v._v("你可以用")]),v._v(" "),i("ul",[i("li",[v._v("usermod ‐d 目录名 用户名，改变该用户登录的初始目录")])]),v._v(" "),i("h3",{attrs:{id:"其他"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[v._v("#")]),v._v(" 其他")]),v._v(" "),i("ul",[i("li",[i("p",[v._v("groupadd 组名，在linux中添加组")])]),v._v(" "),i("li",[i("p",[v._v("vi /etc/group，查看linux中所有组信息，可以看可以编辑")])]),v._v(" "),i("li",[i("p",[v._v("cat /etc/group，查看linux中所有组信息，只可以看不可以编辑")])]),v._v(" "),i("li",[i("p",[v._v("useradd ‐g 组名 用户名，创建用户的同时指定将该用户分配到哪个组下")])]),v._v(" "),i("li",[i("p",[v._v("vi /etc/passwd，查看linux中所有用户信息，可以看可以编辑")])]),v._v(" "),i("li",[i("p",[v._v("cat /etc/passwd，查看linux中所有用户信息，只可以看不可以编辑")])])]),v._v(" "),i("h3",{attrs:{id:"常见命令"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#常见命令"}},[v._v("#")]),v._v(" 常见命令")]),v._v(" "),i("ul",[i("li",[v._v("man")]),v._v(" "),i("li",[v._v("tar：\n"),i("ul",[i("li",[v._v("打包：tar -cvf xxx.tar 目标路径")]),v._v(" "),i("li",[v._v("解包：tar -xvf xxx.tar [-C 指定路径]")])])]),v._v(" "),i("li",[v._v("gzip\n"),i("ul",[i("li",[v._v("压缩：gzip xxx.tar")]),v._v(" "),i("li",[v._v("解压：gzip -d xxx.tar.gz")])])]),v._v(" "),i("li",[v._v("打包+压缩：tar -czvf[-cjvf] xxx.tar.gz[xxx.tar.bz2] 所需文件")]),v._v(" "),i("li",[v._v("解压+解包：tar -xzvf[-xjvf] xxx.tar.gz[xxx.tar.bz2] 所需文件")]),v._v(" "),i("li",[v._v("ls:\n"),i("ul",[i("li",[v._v("-F:在目录名后加了正斜线（/）")]),v._v(" "),i("li",[v._v("-R:递归子目录")]),v._v(" "),i("li",[v._v("-i:显示inode编号，在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为inode编号号。")]),v._v(" "),i("li",[v._v("-l:-l参数会产生长列表格式的输出，包含了目录中每个文件的更多相关信息\n"),i("ul",[i("li",[v._v("文件类型，比如目录（d）、文件（-）、字符型文件（c）或块设备（b）；")]),v._v(" "),i("li",[v._v("文件的权限（参见第6章）；")]),v._v(" "),i("li",[v._v("文件的硬链接总数；")]),v._v(" "),i("li",[v._v("文件属主的用户名；")]),v._v(" "),i("li",[v._v("文件属组的组名；")]),v._v(" "),i("li",[v._v("文件的大小（以字节为单位）；")]),v._v(" "),i("li",[v._v("文件的上次修改时间；")]),v._v(" "),i("li",[v._v("文件名或目录名。")])])]),v._v(" "),i("li",[v._v("过滤输出列表：\n"),i("ul",[i("li",[v._v("问号（?）代表一个字符；")]),v._v(" "),i("li",[v._v("星号（*）代表零个或多个字符")]),v._v(" "),i("li",[v._v("中括号[]\n"),i("ul",[i("li",[v._v("[ai] 匹配a或i")]),v._v(" "),i("li",[v._v("[a – i] 字母a到i")]),v._v(" "),i("li",[v._v("[!a] 排除a")])])])])])])]),v._v(" "),i("li",[v._v("touch：\n"),i("ul",[i("li",[v._v("创建新文件")]),v._v(" "),i("li",[v._v("改变文件的修改时间")])])]),v._v(" "),i("li",[v._v("cp：复制文件 cp source destination\n"),i("ul",[i("li",[v._v("-i:询问")]),v._v(" "),i("li",[v._v("-R:递归复制")])])]),v._v(" "),i("li",[v._v("链接\n"),i("ul",[i("li",[v._v("硬链接(Hard Link)：硬链接会创建独立的虚拟文件，其中包含了原始文件的信息及位置。但是它们从根本上而言\n是同一个文件。引用硬链接文件等同于引用了源文件。硬连接指通过inode编号来进行连接。在Linux中，多个文件名指向同一inode编号是存在的。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。(删除源文件还可访问)")]),v._v(" "),i("li",[v._v("符号链接(Symbolic Link)：软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。符号链接就是一个实实在在的文件，它指向存放在虚拟目录结构中某个地方的另一个文件。这两个通过符号链接在一起的文件，彼此的内容并不相同。(删除源文件不可访问)")]),v._v(" "),i("li",[v._v("软链接：ln -s 源文件路径 目标路径")])])]),v._v(" "),i("li",[v._v("sort 排序，sort [file]")]),v._v(" "),i("li",[v._v("grep：搜索数据，grep [options] pattern [file]")]),v._v(" "),i("li",[v._v("Shebang (Hashbang) 是指 "),i("code",[v._v("#!")]),v._v(" 开头的序列， 在文件中存在 Shebang 的情况下，类 Unix 操作系统的程序加载器会分析 Shebang 后的内容，将这些内容作为解释器指令，并调用该指令，并将载有 Shebang 的文件路径作为该解释器的参数[1]。例如，以指令 "),i("code",[v._v("#!/bin/sh")]),v._v(" 开头的文件在执行时会实际调用 "),i("code",[v._v("/bin/sh")]),v._v(" 程序")])])])}),[],!1,null,null,null);_.default=l.exports}}]);