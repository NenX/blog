(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{389:function(e,t,n){"use strict";n.r(t);var r=n(42),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("A computer system consists of hardware and systems software that work together\nto run application programs. Specific implementations of systems\nchange over time, but the underlying concepts do not. All computer systems have\nsimilar hardware and software components that perform similar functions. This\nbook is written for programmers who want to get better at their craft by understanding\nhow these components work and how they affect the correctness and\nperformance of their programs")]),e._v(" "),n("p",[e._v("You are poised for an exciting journey. If you dedicate yourself to learning the\nconcepts in this book, then you will be on your way to becoming a rare “power programmer,” enlightened by an understanding of the underlying computer system\nand its impact on your application programs.")]),e._v(" "),n("p",[e._v("You are going to learn practical skills such as how to avoid strange numerical\nerrors caused by the way that computers represent numbers. You will learn how\nto optimize your C code by using clever tricks that exploit the designs of modern\nprocessors and memory systems. You will learn how the compiler implements\nprocedure calls and how to use this knowledge to avoid the security holes from\nbuffer overflow vulnerabilities that plague network and Internet software. You will\nlearn how to recognize and avoid the nasty errors during linking that confound\nthe average programmer. You will learn how to write your own Unix shell, your\nown dynamic storage allocation package, and even your own Web server. You will\nlearn the promises and pitfalls of concurrency, a topic of increasing importance as\nmultiple processor cores are integrated onto single chips.")]),e._v(" "),n("p",[e._v("In their classic text on the C programming language [61], Kernighan and\nRitchie introduce readers to C using the hello program shown in Figure 1.1.\nAlthough hello is a very simple program, every major part of the system must\nwork in concert in order for it to run to completion. In a sense, the goal of this\nbook is to help you understand what happens and why when you run hello on\nyour system.")]),e._v(" "),n("p",[e._v("We begin our study of systems by tracing the lifetime of the hello program,\nfrom the time it is created by a programmer, until it runs on a system, prints its\nsimple message, and terminates. As we follow the lifetime of the program, we will\nbriefly introduce the key concepts, terminology, and components that come into\nplay. Later chapters will expand on these ideas.")]),e._v(" "),n("p",[e._v("Our hello program begins life as a source program (or source file) that the\nprogrammer creates with an editor and saves in a text file called hello.c. The\nsource program is a sequence of bits, each with a value of 0 or 1, organized in 8-bit\nchunks called bytes. Each byte represents some text character in the program.")]),e._v(" "),n("p",[e._v("Most computer systems represent text characters using the ASCII standard\nthat represents each character with a unique byte-size integer value.1 For example,\nFigure 1.2 shows the ASCII representation of the hello.c program.")]),e._v(" "),n("p",[e._v("The hello.c program is stored in a file as a sequence of bytes. Each byte has\nan integer value that corresponds to some character. For example, the first byte\nhas the integer value 35, which corresponds to the character ‘#’. The second byte\nhas the integer value 105, which corresponds to the character ‘i’, and so on. Notice\nthat each text line is terminated by the invisible newline character ‘\\n’, which is\nrepresented by the integer value 10. Files such as hello.c that consist exclusively\nof ASCII characters are known as text files. All other files are known as binary\nfiles.")]),e._v(" "),n("p",[e._v("The representation of hello.c illustrates a fundamental idea: All information\nin a system—including disk files, programs stored in memory, user data stored in\nmemory, and data transferred across a network—is represented as a bunch of bits.\nThe only thing that distinguishes different data objects is the context in which\nwe view them. For example, in different contexts, the same sequence of bytes\nmight represent an integer, floating-point number, character string, or machine\ninstruction.")]),e._v(" "),n("p",[e._v("As programmers, we need to understand machine representations of numbers\nbecause they are not the same as integers and real numbers. They are finite\napproximations that can behave in unexpected ways. This fundamental idea is\nexplored in detail in Chapter 2.")])])}),[],!1,null,null,null);t.default=o.exports}}]);