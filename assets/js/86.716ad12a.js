(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{453:function(e,n,a){"use strict";a.r(n);var t=a(42),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"make"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://www.gnu.org/software/make/manual/make.html#Reading",target:"_blank",rel:"noopener noreferrer"}},[e._v("make"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("在我们写node addon时，需要使用node-gyp命令行工具，大部分同学会用"),a("code",[e._v("configue")]),e._v("生成配置文件，然后使用"),a("code",[e._v("build")]),e._v("进行构建。但是node-gyp到底是什么？底层有什么呢？下面我们来刨根问底。")]),e._v(" "),a("p",[e._v("本文的线索是自底向上的讲解node-gyp的各层次依赖，主要有以下几个部分：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1. make\n2. make install\n3. cmake\n4. gyp\n5. node-gyp\n")])])]),a("p",[e._v("层次结构如下图所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://camo.githubusercontent.com/0f38123bdccc34a131c00e8350b3d71a5235bf22/687474703a2f2f7366312d687363646e2d746f732e7073746174702e636f6d2f6f626a2f6965732e66652e6d69732f63316465336162323363393636636631303133663032663034623937656333372e706e67",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"make-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-2"}},[e._v("#")]),e._v(" make")]),e._v(" "),a("p",[e._v("从源文件到可执行文件叫做编译（包括预编译、编译、链接），而make作为构建工具掌握着编译的过程，也就是如何去编译、文件编译的顺序等。")]),e._v(" "),a("p",[e._v("make是最常用的构建工具，针对用户制定的构建规则（makefile）去执行响应的任务。make会根据构建规则去查找依赖，决定编译顺序等。大致了解可参考"),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/02/make.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Make 命令教程"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Makefile（makefile）中定义了make的构建规则，当然也可以自己指定规则文件。例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ make -f rules.txt\n# 或者\n$ make --file=rules.txt\n")])])]),a("p",[e._v("Makefile由一条条的规则组成，每条规则由target(目标)、source（前置条件/依赖）、command(指令)三者组成。")]),e._v(" "),a("p",[e._v("形式如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<target> : <prerequisites> \n[tab]  <commands>\n")])])]),a("p",[e._v("当"),a("code",[e._v("make target")]),e._v("时，主要做了以下几件事：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.检查目标是否存在\n2.如果不存在目标\n\t· 检查目标的依赖是否存在\n\t· 不存在则调用`make source`；存在并且没有变化（修改时间戳小于target），不操作\n\t· 执行target中的command指令\n2.如果存在目标\n\t· 检查依赖是否发生变化\n\t· 没有变化则不需要执行，有变化则执行`make source`后执行command\n")])])]),a("p",[e._v("以编译一个C++文件的规则为例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("hellomake: hellomake.c hellofunc.c\n     gcc -o hellomake hellomake.c hellofunc.c -I.\n")])])]),a("p",[e._v("当我们执行make hellomake，会使用gcc编译器编译产出hellomake。如果make不带有参数，则执行makefile中的第一条指令。")]),e._v(" "),a("p",[e._v("make也允许我们定义一些纯指令（伪指令）去执行一些操作，相当于把上面的target写成指令名称，只不过在command中不生成文件，所以每次执行该规则时都会执行command。为了和真实的目标文件做区分，make中使用了"),a("code",[e._v(".PHONY")]),e._v("关键字，关键字.PHONY可以解决这问题，告诉make该目标是“假的”（磁盘上其实没有这个目标文件）。例如")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(".PHONY: clean\nclean:\n        rm *.o temp\n")])])]),a("p",[e._v("由于makefile目标只能写一个，所以我们可以使用all来将多个目标组合起来。例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("all: executable1 executable2\n")])])]),a("p",[e._v("一般情况下可以把all放在makefile的第一行，这样不带参数执行make就会找到all。")]),e._v(" "),a("h2",{attrs:{id:"make-install"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-install"}},[e._v("#")]),e._v(" make install")]),e._v(" "),a("p",[e._v("make install用来安装文件，它从Makefile中读取指令，安装到系统目录中。")]),e._v(" "),a("h2",{attrs:{id:"cmake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmake"}},[e._v("#")]),e._v(" cmake")]),e._v(" "),a("p",[e._v("上面提到了make，似乎已经够了，如果我是一个开发者，我定义了makefile，让使用者执行make编译就好了。但是不同平台的编译器、动态链接库的路径都有可能不同，如果想让你的软件能够跨平台编译、运行，必须要保证能够在不同平台编译。如果使用上面的Make工具，就得为每一种标准写一次Makefile，这是很繁琐并且容易出错的地方。")]),e._v(" "),a("p",[e._v("cmake的出现就是为了解决上述问题，它首先允许开发者编写一种平台无关的 CMakeList.txt文件来定制整个编译流程，cmake会根据操作系统选择不同编译器，当然也可以在CMakeList.txt中去指定，执行cmake时会目标用户的平台和自定义的配置生成所需的Makefile或工程文件，如Unix的Makefile、Windows的Visual Studio。")]),e._v(" "),a("p",[e._v("CMake是一个跨平台的安装(编译)工具,可以用简单的语句来描述所有平台的安装(编译过程)。他能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性，类似UNIX下的automake。")]),e._v(" "),a("p",[e._v("在 linux 平台下使用 CMake 生成 Makefile 并编译的流程如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.编写 CMake 配置文件 CMakeLists.txt 。\n2.执行命令 cmake PATH 或者 ccmake PATH 生成 Makefile。其中，PATH是CMakeLists.txt 所在的目录。\n3.使用 make 命令进行编译。\n")])])]),a("p",[e._v("CMakeList.txt中由面向过程的一条条指令组成，例如：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# CMake 最低版本号要求\ncmake_minimum_required (VERSION 2.8)\n# 项目信息\nproject (Demo3)\n# 查找当前目录下的所有源文件\n# 并将名称保存到 DIR_SRCS 变量\naux_source_directory(. DIR_SRCS)\n# 添加 math 子目录\nadd_subdirectory(math)\n# 指定生成目标 \nadd_executable(Demo main.cc)\n# 添加链接库\ntarget_link_libraries(Demo MathFunctions)\n")])])]),a("p",[e._v("具体可参考"),a("a",{attrs:{href:"https://cmake.org/cmake/help/cmake2.4docs.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("cmake文档"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"gyp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gyp"}},[e._v("#")]),e._v(" GYP")]),e._v(" "),a("p",[e._v("Gyp是一个类似CMake的项目生成工具, 用于管理你的源代码, 在google code主页上唯一的一句slogan是”GYP can Generate Your Projects.”。GYP是由 Chromium 团队开发的跨平台自动化项目构建工具，Chromium便是通过GYP进行项目构建管理。")]),e._v(" "),a("p",[e._v("首先看GYP与cmake类似，那为什要有GYP呢？GYP和cmake有哪些相同点、不同点呢？")]),e._v(" "),a("h3",{attrs:{id:"gyp-vs-cmake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gyp-vs-cmake"}},[e._v("#")]),e._v(" GYP vs cmake")]),e._v(" "),a("h4",{attrs:{id:"相同点："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同点："}},[e._v("#")]),e._v(" 相同点：")]),e._v(" "),a("p",[e._v("支持跨平台项目工程文件输出，Windows 平台默认是 Visual Studio，Linux 平台默认是 Makefile，Mac 平台默认是 Xcode，这个功能 CMake 也同样支持，只是缺少了 Xcode。")]),e._v(" "),a("h4",{attrs:{id:"不同点："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同点："}},[e._v("#")]),e._v(" 不同点：")]),e._v(" "),a("p",[e._v("配置文件形式不同，GYP的配置文件更像一个“配置文件”，而Cmake的上述所言更像一个面向过程的一个脚本，也就是说在项目设置的层次上进行抽象；同时GYP支持交叉编译。")]),e._v(" "),a("p",[e._v("具体比较可参考"),a("a",{attrs:{href:"http://www.jtianling.com/gyp-developer's-description-of-gyp.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("GYP vs. CMake"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"gyp配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gyp配置"}},[e._v("#")]),e._v(" GYP配置")]),e._v(" "),a("p",[e._v("GYP的配置文件以"),a("code",[e._v(".gyp")]),e._v("结尾，一个典型的"),a("code",[e._v(".gyp")]),e._v("文件如下所示：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n    'variables': {\n      .\n      .\n      .\n    },\n    'includes': [\n      '../build/common.gypi',\n    ],\n    'target_defaults': {\n      .\n      .\n      .\n    },\n    'targets': [\n      {\n        'target_name': 'target_1',\n          .\n          .\n          .\n      },\n      {\n        'target_name': 'target_2',\n          .\n          .\n          .\n      },\n    ],\n    'conditions': [\n      ['OS==\"linux\"', {\n        'targets': [\n          {\n            'target_name': 'linux_target_3',\n              .\n              .\n              .\n          },\n        ],\n      }],\n      ['OS==\"win\"', {\n        'targets': [\n          {\n            'target_name': 'windows_target_4',\n              .\n              .\n              .\n          },\n        ],\n      }, { # OS != \"win\"\n        'targets': [\n          {\n            'target_name': 'non_windows_target_5',\n              .\n              .\n              .\n          },\n      }],\n    ],\n  }\n")])])]),a("p",[a("code",[e._v("variables")]),e._v(": 定义可以在文件其他地方访问的变量；")]),e._v(" "),a("p",[a("code",[e._v("includes")]),e._v(": 将要被引入到该文件中的文件列表，通常是以"),a("code",[e._v(".gypi结尾的文件")]),e._v("；")]),e._v(" "),a("p",[a("code",[e._v("target_defaults")]),e._v(": 将作用域所有目标的默认配置；")]),e._v(" "),a("p",[a("code",[e._v("targets")]),e._v(": 构建的目标列表，每个target中包含构建此目标的所有配置；")]),e._v(" "),a("p",[a("code",[e._v("conditions")]),e._v(": 条件列表，会根据不同条件选择不同的配置项。在最顶级的配置中，通常是平台特定的目标配置。")]),e._v(" "),a("p",[e._v("具体可参考"),a("a",{attrs:{href:"https://gyp.gsrc.io/docs/InputFormatReference.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("GYP文档"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"node-gyp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-gyp"}},[e._v("#")]),e._v(" node-gyp")]),e._v(" "),a("p",[e._v("node-gyp是一个跨平台的命令行工具，目的是编译node addon模块。")]),e._v(" "),a("p",[e._v("常用的命令有"),a("code",[e._v("configure")]),e._v("和"),a("code",[e._v("build")]),e._v("，"),a("code",[e._v("configure")]),e._v("原理就是利用gyp生成不同的编译配置文件，"),a("code",[e._v("build")]),e._v("则根据不同平台、不同构建配置进行编译。")]),e._v(" "),a("h3",{attrs:{id:"configure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configure"}},[e._v("#")]),e._v(" configure")]),e._v(" "),a("p",[e._v("我们分步骤看下configure的代码：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("findPython(python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n})\n")])])]),a("p",[e._v("由于GYP是python写的，所以这里首先找当前系统下的python，内部利用的是"),a("code",[e._v("which")]),e._v("这个第三方库。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function getNodeDir () {\n\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, osenv.home())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n\n    } else {\n      gyp.commands.install([ release.version ], function (err, version) {\n        if (err) return callback(err)\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n")])])]),a("p",[e._v("找到node所在目录，如果没有，则下载node压缩包并解压。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n    mkdirp(buildDir, function (err, isNew) {\n      if (err) return callback(err)\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew)\n      if (win && (!gyp.opts.msvs_version || gyp.opts.msvs_version === '2017')) {\n        findVS2017(function (err, vsSetup) {\n          if (err) {\n            log.verbose('Not using VS2017:', err.message)\n            createConfigFile()\n          } else {\n            createConfigFile(null, vsSetup)\n          }\n        })\n      } else {\n        createConfigFile()\n      }\n    })\n  }\n")])])]),a("p",[e._v("创建build目录，这里区分了是否有vs，查找vs的方法是打开powershell(windows)，试图打开vs。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function createConfigFile (err, vsSetup) {\n    if (err) return callback(err)\n\n    var configFilename = 'config.gypi'\n    var configPath = path.resolve(buildDir, configFilename)\n\n    if (vsSetup) {\n      // GYP doesn't (yet) have support for VS2017, so we force it to VS2015\n      // to avoid pulling a floating patch that has not landed upstream.\n      // Ref: https://chromium-review.googlesource.com/#/c/433540/\n      gyp.opts.msvs_version = '2015'\n      process.env['GYP_MSVS_VERSION'] = 2015\n      process.env['GYP_MSVS_OVERRIDE_PATH'] = vsSetup.path\n      defaults['msbuild_toolset'] = 'v141'\n      defaults['msvs_windows_target_platform_version'] = vsSetup.sdk\n      variables['msbuild_path'] = path.join(vsSetup.path, 'MSBuild', '15.0',\n                                            'Bin', 'MSBuild.exe')\n    }\n\n    // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') return\n      if (opt in gyp.configDefs) return\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n    })\n\n    configs.push(configPath)\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs)\n}\n")])])]),a("p",[e._v("这里创建"),a("code",[e._v("config.gypi文件")]),e._v("，主要包含"),a("code",[e._v("target_defaults")]),e._v("和"),a("code",[e._v("variables")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// config = ['config.gypi']\n  function runGyp (err) {\n    if (err) return callback(err)\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    if (win && !hasMsvsVersion()) {\n      if ('msvs_version' in gyp.opts) {\n        argv.push('-G', 'msvs_version=' + gyp.opts.msvs_version)\n      } else {\n        argv.push('-G', 'msvs_version=auto')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking. \n    var node_exp_file = undefined\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x'\n      var node_root_dir = findNodeDirectory()\n      var candidates = undefined \n      if (process.platform === 'aix') {\n        candidates = ['include/node/node',\n                      'out/Release/node',\n                      'out/Debug/node',\n                      'node'\n                     ].map(function(file) {\n                       return file + '.' + ext\n                     })\n      } else {\n        candidates = ['out/Release/obj.target/libnode',\n                      'out/Debug/obj.target/libnode',\n                      'lib/libnode'\n                     ].map(function(file) {\n                       return file + '.' + ext\n                     })\n      }\n      var logprefix = 'find exports file'\n      node_exp_file = findAccessibleSync(logprefix, node_root_dir, candidates)\n      if (node_exp_file !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', node_exp_file)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, node_root_dir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gyp_script = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var common_gypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(common_gypi, function (err, stat) {\n      if (err)\n        common_gypi = path.resolve(nodeDir, 'common.gypi')\n\n      var output_dir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        output_dir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addon_gypi)\n      argv.push('-I', common_gypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + node_exp_file)\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', output_dir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gyp_script)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n}\n")])])]),a("p",[e._v("这里主要是区分了不同平台，给GYP命令加入各种参数，其中"),a("code",[e._v("-I")]),e._v("代表include，最后执行gyp脚本生成构建配置文件，比如unix下生成makefile。")]),e._v(" "),a("h3",{attrs:{id:"build"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[e._v("#")]),e._v(" build")]),e._v(" "),a("p",[a("code",[e._v("build")]),e._v("比较简单，言简意赅就是就是区分不同平台，收集不同参数，利用不同编译工具进行编译。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("command = win ? 'msbuild' : makeCommand\n")])])]),a("p",[e._v("区分编译工具。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function loadConfigGypi () {\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'))\n        } else {\n          callback(err)\n        }\n        return\n      }\n      config = JSON.parse(data.replace(/\\#.+\\n/, ''))\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration\n      arch = config.variables.target_arch\n      nodeDir = config.variables.nodedir\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release'\n      }\n      if (!buildType) {\n        buildType = 'Release'\n      }\n\n      log.verbose('build type', buildType)\n      log.verbose('architecture', arch)\n      log.verbose('node dev dir', nodeDir)\n\n      if (win) {\n        findSolutionFile()\n      } else {\n        doWhich()\n      }\n    })\n}\n")])])]),a("p",[e._v("加载"),a("code",[e._v("config.gypi")]),e._v(",为构建收集一波参数。如果在windows下，收集"),a("code",[e._v("build/*.sln")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n  function doBuild () {\n\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose\n    if (!win && verbose) {\n      argv.push('V=1')\n    }\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal')\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo')\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      var archLower = arch.toLowerCase()\n      var p = archLower === 'x64' ? 'x64' :\n              (archLower === 'arm' ? 'ARM' : 'Win32')\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p)\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length)\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType)\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C')\n      argv.push('build')\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs')\n          argv.push(j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs')\n          argv.push(require('os').cpus().length)\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) == '.sln'\n      })\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution)\n      }\n    }\n\n    var proc = gyp.spawn(command, argv)\n    proc.on('exit', onExit)\n}\n")])])]),a("p",[e._v("执行编译命令。")])])}),[],!1,null,null,null);n.default=r.exports}}]);