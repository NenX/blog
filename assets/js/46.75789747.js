(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{410:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本章将介绍两种重要的标准库类型 "),a("code",[t._v("string")]),t._v(" 和 "),a("code",[t._v("vector")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("string：表示可变长的字符序列")]),t._v(" "),a("li",[t._v("vector：存放某种给定类型对象的可变长序列")]),t._v(" "),a("li",[t._v("数组：数组的实现与硬件密切相关，string 和 vector 都是对它的某种抽象，但其灵活性稍有不足")]),t._v(" "),a("li",[t._v("迭代器：是 string 和 vector 的配套类型，常被用于访问 string 中的字符或 vector 中的元素")])]),t._v(" "),a("h2",{attrs:{id:"命名空间的-using-声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间的-using-声明"}},[t._v("#")]),t._v(" 命名空间的 using 声明")]),t._v(" "),a("p",[t._v("作用域操作符（::）的含义是：编译器应从操作符左侧名字所示的作用域中寻找右侧那个名字。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用命名空间 std 的中名字 string")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-声明（using-declaration）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-声明（using-declaration）"}},[t._v("#")]),t._v(" using 声明（using declaration）")]),t._v(" "),a("ul",[a("li",[t._v("形式："),a("code",[t._v("using namespace::name")])]),t._v(" "),a("li",[t._v("无须专门的前缀（namespace::name）也能使用所需的名字")]),t._v(" "),a("li",[t._v("每个名字都需要独立的 using 声明："),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一行可以放多条 using 声明语句，但每个名字都必须有自己的 using 声明语句，以分号结束")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    string a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"头文件不应包含-using-声明语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头文件不应包含-using-声明语句"}},[t._v("#")]),t._v(" 头文件不应包含 using 声明语句")]),t._v(" "),a("p",[t._v("头文件的内容会被拷贝到所有包含它的文件中去，如果头文件里有某个 using 声明，那么每个使用该头文件的文件都会有这个声明。由于不经意间包含了一些名字，反而可以产生始料未及的名字冲突。")]),t._v(" "),a("h2",{attrs:{id:"标准库类型-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准库类型-string"}},[t._v("#")]),t._v(" 标准库类型 string")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("string")]),t._v(" 类型必须包含 string 头文件，作为标准库的一部分，string 定义在命名空间 std 中：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"定义和初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义和初始化"}},[t._v("#")]),t._v(" 定义和初始化")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("初始化方式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("string s1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("默认初始化，s1是一个空字符串")])]),t._v(" "),a("tr",[a("td",[t._v("string s2(s1)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("s2是s1的副本")])]),t._v(" "),a("tr",[a("td",[t._v("string s2 = s1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("等价于 s2(s1)")])]),t._v(" "),a("tr",[a("td",[t._v('string s3("value)')]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('s3是字面值"value"的副本，除了字面值最后的那个空字符串外')])]),t._v(" "),a("tr",[a("td",[t._v('string s3 = "value"')]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('等价于s3("value")')])]),t._v(" "),a("tr",[a("td",[t._v("string s4(n,'c')")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("把s4初始化为由连续n个字符'c'组成的串")])])])]),t._v(" "),a("p",[t._v("直接初始化和拷贝初始化：")]),t._v(" "),a("ul",[a("li",[t._v("拷贝初始化（copy initialization）：使用等号（=）初始化一个变量")]),t._v(" "),a("li",[t._v("直接初始化（direct initialization）：不使用等号初始化")])]),t._v(" "),a("h3",{attrs:{id:"string-对象上的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-对象上的操作"}},[t._v("#")]),t._v(" string 对象上的操作")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("os << s")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将s写到输出流os当中，返回os")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("is >> s")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从输入流is读取字符赋给s，返回is")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("getline(is, s)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从输入流is读取一行赋给s，返回is")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s.empty()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("s为空返回true，否则返回false")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s.size()")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回s中字符的个数")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s[n]")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回s中第n个字符的引用")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s1 + s2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回s1和s2连接后的结果")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s1 = s2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("用s2的副本替代s1原来的字符")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s1 == s2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("判断s1和s2所含的字符是否完全一样")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("s1 != s2")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("对大小写敏感")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<, <=, >, >=")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("利用字符在字典中的顺序进行比较，大小写敏感")])])])]),t._v(" "),a("p",[t._v("读写 string 对象")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("执行读写操作时，"),a("code",[t._v("string")]),t._v(" 对象会自动忽略开头的空白并从第一个真的的字符开始读起，知道遇见下一处空白：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果程序输入是“    HELLO WORLD    ”，则输出将是“HELLO”，输出结果没有包含任何空格。")]),t._v(" "),a("p",[t._v("和内置类型的输入输出一样，string 对象的此类操作也是返回操作符左侧的运算对象作为其结果：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果程序输入是“    HELLO WORLD    ”，则输出将是“HELLOWORLD”。")])]),t._v(" "),a("li",[a("p",[t._v("读取未知数量的 string 对象：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("如果希望在最终的字符串中保留输入时的空格符，这时应使用 "),a("code",[t._v("getline")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getline")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" tmp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("getline")]),t._v(" 函数接收一个输入流和一个 "),a("code",[t._v("string")]),t._v(" 对象，函数从给定的输入流中读取内容，直到遇到换行符为止（注意换行符也被读取进来），然后把读取的内容存入 "),a("code",[t._v("string")]),t._v(" 对象中（注意不存换行符）。")])])]),t._v(" "),a("p",[t._v("string 的 empty 和 size 操作：")]),t._v(" "),a("ul",[a("li",[t._v("empty："),a("code",[t._v("string")]),t._v(" 的一个成员函数，根据 "),a("code",[t._v("string")]),t._v(" 对象是否为空返回一个对应的布尔值。")]),t._v(" "),a("li",[t._v("size：返回 string 对象的长度")]),t._v(" "),a("li",[t._v("string::size_type："),a("code",[t._v("string")]),t._v(" 类及其他大多数标准库类型定义了几种配套的类型，这些配套类型体现了标准库类型与机器无关的特性，"),a("code",[t._v("string::size_type")]),t._v(" 即是其中的一种。"),a("code",[t._v("string::size_type")]),t._v(" 是一个无符号类型的值而且足够存放下任何 "),a("code",[t._v("string")]),t._v(" 对象的大小。所有用于存放 "),a("code",[t._v("string")]),t._v(" 类的 "),a("code",[t._v("size")]),t._v(" 函数返回值的变量，都应该是 "),a("code",[t._v("string::size_type")]),t._v(" 类型的。"),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("如果在表达式中混用了带符号数和无符号数将可能产生意想不到的结果。如果一条表达式中已经有了 "),a("code",[t._v("size")]),t._v(" 函数，就不要再使用 "),a("code",[t._v("int")]),t._v("，这样可以避免混用 "),a("code",[t._v("int")]),t._v(" 和 "),a("code",[t._v("unsigned")]),t._v(" 可能带来的问题。")])])])]),t._v(" "),a("p",[t._v("比较 string 对象")]),t._v(" "),a("ul",[a("li",[t._v("相等性运算符（== 和 !=）：比较两个 "),a("code",[t._v("string")]),t._v(" 对象是否长度相等且所包含的字符也全部相同。")]),t._v(" "),a("li",[t._v("<、<=、>、>=：\n"),a("ul",[a("li",[t._v("如果两个 "),a("code",[t._v("string")]),t._v(" 对象的长度不通，而且较短 "),a("code",[t._v("string")]),t._v(" 对象的每个字符都与较长 "),a("code",[t._v("string")]),t._v(" 对象对应位置上的字符相同，就说较短 "),a("code",[t._v("string")]),t._v(" 对象小于较长 "),a("code",[t._v("string")]),t._v(" 对象。")]),t._v(" "),a("li",[t._v("如果 string 对象在某些对应位置上不一致，则 string 对象比较的结果其实就是 string 对象中第一对相异字符比较的结果。\n字面值和 string 对象相加")])])])]),t._v(" "),a("p",[t._v("标准库允许将字符字面值与字符串字面值转化成 string 对象，所以在需要 string 对象的地方就可以使用这两种字面量来代替。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("当把 string 对象和字符字面量及字符串字面量混在一条语句中使用时，必须确保加法运算符（+）的两侧运算对象至少有一个是 string 对象。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstring s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\nstring s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n")])])]),a("p",[t._v("切记：c++ 语言中的字符串字面量并不是标准库类型 string 的对象，字符串字面量与 string 对象是不同的类型。")])]),t._v(" "),a("h3",{attrs:{id:"处理-string-对象中的字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理-string-对象中的字符"}},[t._v("#")]),t._v(" 处理 string 对象中的字符")]),t._v(" "),a("p",[t._v("cctype 头文件中的函数")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("函数")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isalnum")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数字或字母")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isalpha")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数字")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isdigit")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("字母")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isxdigit")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("十六进制数字")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isprint")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可打印：空格、可使形式")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isspace")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("空格、空白字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isgraph")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("非空白可打印")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("iscntrl")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("控制字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ispunct")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("标点符号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("islower")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("小写字母")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("isupper")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("大写字母")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("tolower")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("toupper")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("C++ 标准库除了定义 C++ 语言特有的功能外，也兼容了 C 语言的标准库。C 语言的头文件形如 "),a("code",[t._v("name.h")]),t._v("，C++ 则将这些文件命名为 "),a("code",[t._v("cname")]),t._v("。\n"),a("code",[t._v("cctype")]),t._v(" 头文件和 "),a("code",[t._v("ctype.h")]),t._v(" 头文件的内容是一样的，只不过从命名规范上更复合 C++ 语言的要求。在 "),a("code",[t._v("cname")]),t._v(" 头文件定义的名字从属于命名空间 "),a("code",[t._v("std")]),t._v("，而定义在 "),a("code",[t._v("name.h")]),t._v(" 中的则不然。")])]),t._v(" "),a("p",[t._v("处理每个字符？使用基于范围的 for 语句")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("使用基于范围的 for 语句改变字符串中的字符")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"标准库类型-vector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准库类型-vector"}},[t._v("#")]),t._v(" 标准库类型 vector")]),t._v(" "),a("p",[a("code",[t._v("vector")]),t._v(" 也称为容器（container），表示对象的集合。要想是用 vector，必须包含适当的头文件：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<vector>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("C++ 既有类模板（class template）也有函数模板，其中 vector 是一个类模板。模板不是类或函数，相反可以将模板看作为编译器生成类或函数编写的一份说明。")]),t._v(" "),a("p",[t._v("编译器根据模板创建类或函数的过程称为实例化（instantiation），当使用模板时，需要指出编译器应把类或函数实例化为何种类型。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" vs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("vector")]),t._v(" 能容纳绝大多数类型的对象最为其元素，但是因为引用不是对象，所以不存在包含引用的 "),a("code",[t._v("vector")]),t._v("。")]),t._v(" "),a("p",[t._v("在早期 C++ 标准中，如果 "),a("code",[t._v("vector")]),t._v(" 的元素还是 "),a("code",[t._v("vector")]),t._v("，则其定义的形式与现在的 C++11 新标准略有不同。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在外层 vector 对象的右尖括号和其元素之间添加一个空格，某些编译器仍需要")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新标准定义形式")]),t._v("\n")])])]),a("h3",{attrs:{id:"定义和初始化-vector-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义和初始化-vector-对象"}},[t._v("#")]),t._v(" 定义和初始化 vector 对象")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("初始化形式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("v1 是一个执行默认初始化的空 vector，其潜在的元素是 T 类型的")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v2(v1)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("v2 中包含了 v1 所有元素的副本")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v2 = v1")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("等价于 "),a("code",[t._v("v2(v1)")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v3(n, val)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("v3 包含了 n 个重复的元素，每个元素的值都是 val")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v4(n)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("v4 包含了 n 个重复的执行了值初始化的对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v5{a, b, c...}")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("v5 包含了初始值数量的元素，每个元素被赋予对应的初始值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[t._v("vector<T> v5 = {a, b, c...}")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("等价于 v5{a, b, c...}")])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("列表初始化 vector 对象")]),t._v(" "),a("p",[t._v("C++ 语言提供了几种不同的"),a("RouterLink",{attrs:{to:"/learning/c++ 基础/变量和基础类型.html#_2-2-变量"}},[t._v("初始化方式")]),t._v("，在大多数情况下这些初始化方式可以相互等价地使用。例外情况：")],1),t._v(" "),a("ul",[a("li",[t._v("使用"),a("a",{attrs:{href:"#%E6%A0%87%E5%87%86%E5%BA%93%E7%B1%BB%E5%9E%8B-string"}},[t._v("拷贝初始化")]),t._v("时（即使用 = 时），只能提供一个初始值")]),t._v(" "),a("li",[t._v("如果提供一个"),a("RouterLink",{attrs:{to:"/learning/c++ 基础/变量和基础类型.html#_2-6-1"}},[t._v("类内初始值")]),t._v("，则只能使用拷贝初始化或者使用花括号的形式初始化。")],1),t._v(" "),a("li",[t._v("如果提供的是初始元素值的列表，则只能把初始值都放在花括号里面进行列表初始化，而不能放在圆括号里。")])])]),t._v(" "),a("li",[a("p",[t._v("值初始化：如果只提供 vector 对象容纳的元素数量而不提供初始值，此时库会创建一个值初始化的（value-initialized）的元素初值，并把它赋给容器的所有元素。这个初值由 vector 对象中的类型决定：")]),t._v(" "),a("ul",[a("li",[t._v("内置类型：比如 "),a("code",[t._v("int")]),t._v("，则元素初始值自动设为 0。")]),t._v(" "),a("li",[t._v("类类型：比如 "),a("code",[t._v("string")]),t._v("，则元素由类默认初始化。")])]),t._v(" "),a("p",[t._v("对于这种初始化的方式有两个特殊的限制：")]),t._v(" "),a("ul",[a("li",[t._v("如果 vector 对象中的元素不支持默认初始化，我们就必须提供初始的元素的值。")]),t._v(" "),a("li",[t._v("如果只提供了元素的数量而没有设定初始值，只能使用直接初始化（而不是拷贝初始化）")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" vi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须使用直接初始化的形式指定向量大小")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("列表初始值还是元素数量？")])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10个值都是0的元素")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1个值是10的元素")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10个值都是1的元素")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2个值分别是10和1的元素")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果用的是圆括号，可以说提供的值是用来构造 "),a("code",[t._v("vector")]),t._v(" 对象的。")]),t._v(" "),a("li",[t._v("如果用的是花括号：\n"),a("ul",[a("li",[t._v("提供的值满足执行列表初始化时，将花括号的值当作元素初始值的列表来处理")]),t._v(" "),a("li",[t._v("无法执行列表初始化时，将花括号的值用来构造 "),a("code",[t._v("vector")]),t._v(" 对象")])])])]),t._v(" "),a("h3",{attrs:{id:"向-vector-对象添加元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#向-vector-对象添加元素"}},[t._v("#")]),t._v(" 向 vector 对象添加元素")]),t._v(" "),a("p",[t._v("直接初始化的方式适应于：")]),t._v(" "),a("ol",[a("li",[t._v("初始值已知且数量少")]),t._v(" "),a("li",[t._v("初始值是另一个 vector 对象的拷贝")]),t._v(" "),a("li",[t._v("所有元素的初始值都一样\n"),a("code",[t._v("push_back")]),t._v(" 把一个值当成 "),a("code",[t._v("vector")]),t._v(" 对象的尾元素压到（push）"),a("code",[t._v("vector")]),t._v(" 对象的尾端（back）：")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v(" vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("如果循环体内部包含向 "),a("code",[t._v("vector")]),t._v(" 对象添加元素的语句，则不能使用范围 "),a("code",[t._v("for")]),t._v(" 循环。")]),t._v(" "),a("p",[t._v("范围 "),a("code",[t._v("for")]),t._v(" 循环体内不应改变其所遍历序列的大小。")])]),t._v(" "),a("h3",{attrs:{id:"其他-vector-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-vector-操作"}},[t._v("#")]),t._v(" 其他 vector 操作")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("vector 支持的操作")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v.empty()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v.size()")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v.push_back(t)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v[n]")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v1 = v2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v1 = {a, b, c...}")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v1 == v2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("v1 != v2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("<=, <, >, >=")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h2",{attrs:{id:"迭代器介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器介绍"}},[t._v("#")]),t._v(" 迭代器介绍")]),t._v(" "),a("p",[t._v("标准库容易都支持使用迭代器（iterator），但是其中只有少数几种同时支持下标运算符。")]),t._v(" "),a("p",[t._v("严格来说，"),a("code",[t._v("string")]),t._v(" 不属于容器类型，但是 "),a("code",[t._v("string")]),t._v(" 支持很多与容器类型类似的操作：迭代器、下标运算符。")]),t._v(" "),a("ul",[a("li",[t._v("类似于指针类型，迭代器也提供了对对象的间接访问。")]),t._v(" "),a("li",[t._v("迭代器的对象：容器中的元素或 string 对象中的字符")]),t._v(" "),a("li",[t._v("使用迭代器可以访问某个元素，也能从一个元素移动到另一个元素")]),t._v(" "),a("li",[t._v("迭代器有有效和无效之分\n"),a("ul",[a("li",[t._v("有效：指向某个元素或指向容器中尾元素的下一位置")]),t._v(" "),a("li",[t._v("无效：其他都属于无效")])])])]),t._v(" "),a("h3",{attrs:{id:"使用迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用迭代器"}},[t._v("#")]),t._v(" 使用迭代器")]),t._v(" "),a("p",[t._v("有迭代器的类型同时拥有返回迭代器的成员：")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("begin")]),t._v("：返回指向第一个元素的迭代器")]),t._v(" "),a("p",[a("code",[t._v("end")]),t._v("：返回指向容器尾元素的下一个位置（one past the end）的迭代器（尾迭代器 end iterator）")])]),t._v(" "),a("ul",[a("li",[t._v("迭代器的运算符")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("使用")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("*iter")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("返回迭代器 iter 所指元素的引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter->mem")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("解引用 iter 并获取该元素名为 mem 的成员")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("++iter")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("令 iter 指向容器的下一个元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("--iter")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("令 iter 指向容器的上一个元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter1 == iter2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否指向同一个元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter1 != iter2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是否指向同一个元素")])])])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确保 s 非空")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toupper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("迭代器类型")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("iterator it1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读写")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("iterator it2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读写")]),t._v("\n\nstring"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("const_iterator it3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只读")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("const_iterator it4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只读")]),t._v("\n\n\nstring "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只读")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读写")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" b3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cbegin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// C++11 新标准，只读")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("某些对 vector 的操作会使迭代器失效")]),t._v(" "),a("p",[t._v("凡是使用了迭代器的循环体内，都不要向迭代器所属容器增减元素")])]),t._v(" "),a("h3",{attrs:{id:"迭代器运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器运算"}},[t._v("#")]),t._v(" 迭代器运算")]),t._v(" "),a("p",[t._v("vector 和 string 迭代器支持的运算")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("使用")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter + n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("迭代器指向位置向前移动 n 个位置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter - n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("迭代器指向位置向后移动 n 个位置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter += n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter -= n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("iter1 - iter2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("迭代器相减的结果是它们之间的距离")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v(">、>=、<=、<")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}})])])]),t._v(" "),a("h2",{attrs:{id:"_3-5数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5数组"}},[t._v("#")]),t._v(" 3.5数组")]),t._v(" "),a("p",[t._v("存放类型相同对象的容器，大小确定不变，不能向数据增减元素。")]),t._v(" "),a("h3",{attrs:{id:"_3-5-1定义和初始化数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1定义和初始化数组"}},[t._v("#")]),t._v(" 3.5.1定义和初始化数组")]),t._v(" "),a("blockquote",[a("p",[t._v("编译时数组的维度应该是已知的，即维度必须是一个大于零"),a("RouterLink",{attrs:{to:"/learning/c++ 基础/变量和基础类型.html#constexpr-和常量表达式"}},[t._v("常量表达式")]),t._v("。")],1),t._v(" "),a("p",[t._v("定义数组时必须指定数组的类型，不允许用 auto 由初始值的列表推断类型")])]),t._v(" "),a("ul",[a("li",[t._v("显示初始化数组元素：\n"),a("ul",[a("li",[t._v("列表初始化数组元素，根据初始值计算推断出数组维度")]),t._v(" "),a("li",[t._v("若指明维度：维度必须大于等于初始值元素的数量，剩下的元素被初始化为默认值")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 长度为2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {1, 2, 0}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("字符数组特殊性：使用"),a("RouterLink",{attrs:{to:"/learning/c++ 基础/2. 变量和基础类型.html#_2-1-3-字面值常量"}},[t._v("字符串字面值")]),t._v("对数组初始化，字符串末尾的空字符也会被拷贝到数组中去。")],1),t._v(" "),a("li",[t._v("不允许拷贝和赋值")]),t._v(" "),a("li",[t._v("理解复杂的数组声明"),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包含10个整型指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arrPtr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向一个含有1个整型的数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arrRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用一个含有1个整型的数组")]),t._v("\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"_3-5-2访问数组元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2访问数组元素"}},[t._v("#")]),t._v(" 3.5.2访问数组元素")]),t._v(" "),a("p",[t._v("使用数组下标时，通常将其定义为 "),a("code",[t._v("size_t")]),t._v(" 类型。"),a("code",[t._v("size_t")]),t._v(" 是一种机器相关的无符号整型，它被设计得足够大以便能表示内存中任意对象的大小。在 cstddef 头文件中定义了 size_t 类型，这个文件是C标准库 stddef 头文件的 C++ 版本。")]),t._v(" "),a("ul",[a("li",[t._v("遍历所有元素：范围 for 循环")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-5-3指针和数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3指针和数组"}},[t._v("#")]),t._v(" 3.5.3指针和数组")]),t._v(" "),a("blockquote",[a("p",[t._v("在很多使用到数组名字的地方，编译器会自动将其替换成一个指向该数组首元素的指针")])]),t._v(" "),a("p",[t._v("作为 auto 变量的初始值时，推断出来的类型是指针。而使用 decltype 关键字时得到的类型还是数组：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// p是一个指向arr首元素的整型指针")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("decltype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" arr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arr2 是一个包含一个元素的数组")]),t._v("\n")])])]),a("ul",[a("li",[t._v("指针也是迭代器\nvector 和 string 的迭代器支持的运算，数组的指针全都支持。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二个元素设置为3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" ep "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尾后指针")]),t._v("\n")])])]),a("ul",[a("li",[t._v("标准库函数begin和end\n尽管可以计算出尾后指针，但是这种用法极易出错，使用 C++11 标准库的两个名为 begin 和 end 的函数更为安全。")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-5-4-c风格字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-c风格字符串"}},[t._v("#")]),t._v(" 3.5.4 C风格字符串")]),t._v(" "),a("p",[t._v("将字符串保存在字符数组中并以空字符结束（null terminated）。")]),t._v(" "),a("p",[t._v("C 语言标准库提供了一组用于操作C风格字符串的函数，它们定义在 cstring 头文件中。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("用法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("strlen(p)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回p的长度，空字符串不计算在内")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("strcmp(p1,p2)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("如果p1 == p2，返回0；如果p1 > p2，返回一个正值；如果 p1 < p2，返回一个负值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("strcat(p1,p2)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将p2附加到p1，返回p1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("strcpy(p1,p2)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将p2拷贝给p1，返回p1")])])])]),t._v(" "),a("p",[t._v("传入此类函数的指针必须指向空字符串作为结束的字符数组。")]),t._v(" "),a("h3",{attrs:{id:"_3-5-5-与旧代码的接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-5-与旧代码的接口"}},[t._v("#")]),t._v(" 3.5.5 与旧代码的接口")]),t._v(" "),a("ul",[a("li",[t._v("混用 string 和 C 语言风格字符串\n"),a("ul",[a("li",[t._v("C 语言风格字符串 -> string\n"),a("ul",[a("li",[t._v("允许使用字符串字面值/以空字符串结束的字符数组来初始化 string，或为string赋值")]),t._v(" "),a("li",[t._v("在 string 对象的加法运算中允许使用C语言风格字符串作为其中一个运算对象")])])]),t._v(" "),a("li",[t._v("string -> C语言风格字符串"),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("c_str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[t._v("使用数组初始化 vector 对象")])]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" cs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nvector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("v")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("auto")]),t._v(" vb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ve "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" vb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" ve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("vb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("vb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("使用指针和数组很容易出错，现在的 C++ 程序应当尽量使用 vector 和迭代器，避免使用指针和内置数组")])]),t._v(" "),a("blockquote",[a("p",[t._v("应该尽量使用 string，避免使用 C 风格字符串")])]),t._v(" "),a("h2",{attrs:{id:"_3-6多维数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6多维数组"}},[t._v("#")]),t._v(" 3.6多维数组")]),t._v(" "),a("ul",[a("li",[t._v("多维数组的初始化"),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {{0,2},{3,4}}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {{1,0},{2,2}}")]),t._v("\n")])])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);