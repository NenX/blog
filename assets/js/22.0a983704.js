(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{378:function(e,t,o){"use strict";o.r(t);var n=o(42),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"_1-4-processors-read-and-interpret-instructions-stored-in-memory"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-processors-read-and-interpret-instructions-stored-in-memory"}},[e._v("#")]),e._v(" 1.4 Processors Read and Interpret Instructions Stored in Memory")]),e._v(" "),o("p",[e._v("At this point, our hello.c source program has been translated by the compilation\nsystem into an executable object file called hello that is stored on disk. To run\nthe executable file on a Unix system, we type its name to an application program\nknown as a shell:")]),e._v(" "),o("div",{staticClass:"language-bash extra-class"},[o("pre",{pre:!0,attrs:{class:"language-bash"}},[o("code",[e._v("linux"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" ./hello\nhello, world\nlinux"),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),o("p",[e._v("The shell is a command-line interpreter that prints a prompt, waits for you\nto type a command line, and then performs the command. If the first word of the\ncommand line does not correspond to a built-in shell command, then the shell\nassumes that it is the name of an executable file that it should load and run. So\nin this case, the shell loads and runs the hello program and then waits for it to\nterminate. The hello program prints its message to the screen and then terminates.\nThe shell then prints a prompt and waits for the next input command line.")]),e._v(" "),o("h2",{attrs:{id:"_1-4-1-hardware-organization-of-a-system"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-hardware-organization-of-a-system"}},[e._v("#")]),e._v(" 1.4.1 Hardware Organization of a System")]),e._v(" "),o("p",[e._v("To understand what happens to our hello program when we run it, we need\nto understand the hardware organization of a typical system, which is shown\nin Figure 1.4. This particular picture is modeled after the family of recent Intel\nsystems, but all systems have a similar look and feel. Don’t worry about the\ncomplexity of this figure just now. We will get to its various details in stages\nthroughout the course of the book.")]),e._v(" "),o("h3",{attrs:{id:"buses"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#buses"}},[e._v("#")]),e._v(" Buses")]),e._v(" "),o("p",[e._v("Running throughout the system is a collection of electrical conduits called buses\nthat carry bytes of information back and forth between the components. Buses\nare typically designed to transfer fixed-size chunks of bytes known as words. The\nnumber of bytes in a word (the word size) is a fundamental system parameter that\nvaries across systems. Most machines today have word sizes of either 4 bytes (32\nbits) or 8 bytes (64 bits). In this book, we do not assume any fixed definition of\nword size. Instead, we will specify what we mean by a “word” in any context that\nrequires this to be defined.")]),e._v(" "),o("h3",{attrs:{id:"i-o-devices"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#i-o-devices"}},[e._v("#")]),e._v(" I/O Devices")]),e._v(" "),o("p",[e._v("Input/output (I/O) devices are the system’s connection to the external world. Our\nexample system has four I/O devices: a keyboard and mouse for user input, a\ndisplay for user output, and a disk drive (or simply disk) for long-term storage of\ndata and programs. Initially, the executable hello program resides on the disk.")]),e._v(" "),o("p",[e._v("Each I/O device is connected to the I/O bus by either a controller or an adapter.\nThe distinction between the two is mainly one of packaging. Controllers are chip\nsets in the device itself or on the system’s main printed circuit board (often called\nthe motherboard). An adapter is a card that plugs into a slot on the motherboard.\nRegardless, the purpose of each is to transfer information back and forth between\nthe I/O bus and an I/O device.")]),e._v(" "),o("p",[e._v("Chapter 6 has more to say about how I/O devices such as disks work. In\nChapter 10, you will learn how to use the Unix I/O interface to access devices from\nyour application programs. We focus on the especially interesting class of devices\nknown as networks, but the techniques generalize to other kinds of devices as well.")]),e._v(" "),o("h3",{attrs:{id:"main-memory"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#main-memory"}},[e._v("#")]),e._v(" Main Memory")]),e._v(" "),o("p",[e._v("The main memory is a temporary storage device that holds both a program and\nthe data it manipulates while the processor is executing the program. Physically,\nmain memory consists of a collection of dynamic random access memory (DRAM)\nchips. Logically, memory is organized as a linear array of bytes, each with its own\nunique address (array index) starting at zero. In general, each of the machine\ninstructions that constitute a program can consist of a variable number of bytes.\nThe sizes of data items that correspond to C program variables vary according\nto type. For example, on an x86-64 machine running Linux, data of type short\nrequire 2 bytes, types int and float 4 bytes, and types long and double 8 bytes")]),e._v(" "),o("p",[e._v("Chapter 6 has more to say about how memory technologies such as DRAM\nchips work, and how they are combined to form main memory.")]),e._v(" "),o("h3",{attrs:{id:"processor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#processor"}},[e._v("#")]),e._v(" Processor")]),e._v(" "),o("p",[e._v("The central processing unit (CPU), or simply processor, is the engine that interprets (or executes) instructions stored in main memory. At its core is a word-size\nstorage device (or register) called the program counter (PC). At any point in time,\nthe PC points at (contains the address of) some machine-language instruction in\nmain memory.")]),e._v(" "),o("p",[e._v("From the time that power is applied to the system until the time that the\npower is shut off, a processor repeatedly executes the instruction pointed at by the\nprogram counter and updates the program counter to point to the next instruction.\nA processor appears to operate according to a very simple instruction execution\nmodel, defined by itsinstruction set architecture. In this model, instructions execute")]),e._v(" "),o("p",[e._v("in strict sequence, and executing a single instruction involves performing a series\nof steps. The processor reads the instruction from memory pointed at by the\nprogram counter (PC), interprets the bits in the instruction, performs some simple\noperation dictated by the instruction, and then updates the PC to point to the next\ninstruction, which may or may not be contiguous in memory to the instruction that\nwas just executed.")]),e._v(" "),o("p",[e._v("There are only a few of these simple operations, and they revolve around\nmain memory, the register file, and the arithmetic/logic unit (ALU). The register\nfile is a small storage device that consists of a collection of word-size registers, each\nwith its own unique name. The ALU computes new data and address values. Here\nare some examples of the simple operations that the CPU might carry out at the\nrequest of an instruction:")]),e._v(" "),o("ul",[o("li",[e._v("Load: Copy a byte or a word from main memory into a register, overwriting\nthe previous contents of the register.")]),e._v(" "),o("li",[e._v("Store: Copy a byte or a word from a register to a location in main memory,\noverwriting the previous contents of that location.")]),e._v(" "),o("li",[e._v("Operate: Copy the contents of two registers to the ALU, perform an arithmetic\noperation on the two words, and store the result in a register, overwriting the\nprevious contents of that register.")]),e._v(" "),o("li",[e._v("Jump: Extract a word from the instruction itself and copy that word into the\nprogram counter (PC), overwriting the previous value of the PC.")])]),e._v(" "),o("p",[e._v("We say that a processor appears to be a simple implementation of its instruction set architecture,\nbut in fact modern processors use far more complex mechanisms to speed up program execution.\nThus, we can distinguish the processor’s instruction set architecture,\ndescribing the effect of each machine-code instruction, from its microarchitecture,\ndescribing how the processor is actually implemented.  When we study machine code in Chapter 3,\nwe will consider the abstraction provided by the machine’s instruction set architecture.\nChapter 4 has more to say about how processors are actually implemented.\nChapter 5 describes a model of how modern processors work that enables predicting and optimizing\nthe performance of machine-language programs.")]),e._v(" "),o("h2",{attrs:{id:"_1-4-1-hardware-organization-of-a-system-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-hardware-organization-of-a-system-2"}},[e._v("#")]),e._v(" 1.4.1 Hardware Organization of a System")]),e._v(" "),o("p",[e._v("Given this simple view of a system’s hardware organization and operation, we can\nbegin to understand what happens when we run our example program. We must\nomit a lot of details here that will be filled in later, but for now we will be content\nwith the big picture.")]),e._v(" "),o("p",[e._v("Initially, the shell program is executing its instructions, waiting for us to type a\ncommand. As we type the characters ./hello at the keyboard, the shell program\nreads each one into a register and then stores it in memory, as shown in Figure 1.5.")]),e._v(" "),o("p",[e._v("When we hit the enter key on the keyboard, the shell knows that we have\nfinished typing the command. The shell then loads the executable hello file by\nexecuting a sequence of instructions that copies the code and data in the hello\nobject file from disk to main memory. The data includes the string of characters\nhello, world\\n that will eventually be printed out.")]),e._v(" "),o("p",[e._v("Using a technique known as direct memory access (DMA, discussed in Chapter 6), the data travel directly from disk to main memory, without passing through the processor. This step is shown in Figure 1.6.")]),e._v(" "),o("p",[e._v("Once the code and data in the hello object file are loaded into memory,\nthe processor begins executing the machine-language instructions in the hello\nprogram’s main routine. These instructions copy the bytes in the hello, world\\n\nstring from memory to the register file, and from there to the display device, where\nthey are displayed on the screen. This step is shown in Figure 1.7.")])])}),[],!1,null,null,null);t.default=a.exports}}]);